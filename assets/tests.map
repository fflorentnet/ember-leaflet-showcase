{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-leaflet-showcase/tests/app.lint-test.js","ember-leaflet-showcase/tests/helpers/ember-power-select.js","ember-leaflet-showcase/tests/test-helper.js","ember-leaflet-showcase/tests/tests.lint-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-leaflet-showcase/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/leaflet-draw.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/leaflet-draw.js should pass ESLint\\n\\n9:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n10:5 - \\'L\\' is not defined. (no-undef)\\n11:5 - \\'L\\' is not defined. (no-undef)\\n12:5 - \\'L\\' is not defined. (no-undef)\\n13:5 - \\'L\\' is not defined. (no-undef)\\n14:5 - \\'L\\' is not defined. (no-undef)\\n15:5 - \\'L\\' is not defined. (no-undef)\\n16:5 - \\'L\\' is not defined. (no-undef)\\n17:5 - \\'L\\' is not defined. (no-undef)\\n18:5 - \\'L\\' is not defined. (no-undef)\\n19:5 - \\'L\\' is not defined. (no-undef)\\n20:5 - \\'L\\' is not defined. (no-undef)\\n21:5 - \\'L\\' is not defined. (no-undef)\\n22:5 - \\'L\\' is not defined. (no-undef)\\n25:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n33:22 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n35:19 - Use import { camelize } from \\'@ember/string\\'; instead of using Ember.String.camelize (ember/new-module-imports)\\n37:33 - Use import { classify } from \\'@ember/string\\'; instead of using Ember.String.classify (ember/new-module-imports)\\n70:24 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n75:24 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n97:19 - Use import { camelize } from \\'@ember/string\\'; instead of using Ember.String.camelize (ember/new-module-imports)\\n98:33 - Use import { classify } from \\'@ember/string\\'; instead of using Ember.String.classify (ember/new-module-imports)\\n102:9 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)\\n107:13 - Use import { run } from \\'@ember/runloop\\'; instead of using Ember.run (ember/new-module-imports)');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint\\n\\n9:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('helpers/readable-polygon.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/readable-polygon.js should pass ESLint\\n\\n15:28 - \\'rectangle\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n});","define('ember-leaflet-showcase/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('ember-leaflet-showcase/tests/test-helper', ['ember-leaflet-showcase/app', 'ember-leaflet-showcase/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('ember-leaflet-showcase/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define('ember-leaflet-showcase/config/environment', [], function() {\n  var prefix = 'ember-leaflet-showcase';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-leaflet-showcase/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}